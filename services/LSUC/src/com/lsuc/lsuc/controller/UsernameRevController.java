/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.LicenseeAud;
import com.lsuc.lsuc.LicenseeclasspracticegroupAud;
import com.lsuc.lsuc.PersonAud;
import com.lsuc.lsuc.PersonaddressAud;
import com.lsuc.lsuc.UsernameRev;
import com.lsuc.lsuc.service.UsernameRevService;


/**
 * Controller object for domain model class UsernameRev.
 * @see UsernameRev
 */
@RestController("LSUC.UsernameRevController")
@Api(value = "UsernameRevController", description = "Exposes APIs to work with UsernameRev resource.")
@RequestMapping("/LSUC/UsernameRev")
public class UsernameRevController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsernameRevController.class);

    @Autowired
	@Qualifier("LSUC.UsernameRevService")
	private UsernameRevService usernameRevService;

	@ApiOperation(value = "Creates a new UsernameRev instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public UsernameRev createUsernameRev(@RequestBody UsernameRev usernameRev) {
		LOGGER.debug("Create UsernameRev with information: {}" , usernameRev);

		usernameRev = usernameRevService.create(usernameRev);
		LOGGER.debug("Created UsernameRev with information: {}" , usernameRev);

	    return usernameRev;
	}


    @ApiOperation(value = "Returns the UsernameRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UsernameRev getUsernameRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UsernameRev with id: {}" , id);

        UsernameRev foundUsernameRev = usernameRevService.getById(id);
        LOGGER.debug("UsernameRev details with id: {}" , foundUsernameRev);

        return foundUsernameRev;
    }

    @ApiOperation(value = "Updates the UsernameRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public UsernameRev editUsernameRev(@PathVariable("id") Integer id, @RequestBody UsernameRev usernameRev) throws EntityNotFoundException {
        LOGGER.debug("Editing UsernameRev with id: {}" , usernameRev.getId());

        usernameRev.setId(id);
        usernameRev = usernameRevService.update(usernameRev);
        LOGGER.debug("UsernameRev details with id: {}" , usernameRev);

        return usernameRev;
    }

    @ApiOperation(value = "Deletes the UsernameRev instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteUsernameRev(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UsernameRev with id: {}" , id);

        UsernameRev deletedUsernameRev = usernameRevService.delete(id);

        return deletedUsernameRev != null;
    }

    /**
     * @deprecated Use {@link #findUsernameRevs(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of UsernameRev instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UsernameRev> searchUsernameRevsByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UsernameRevs list");
        return usernameRevService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UsernameRev instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UsernameRev> findUsernameRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UsernameRevs list");
        return usernameRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of UsernameRev instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<UsernameRev> filterUsernameRevs(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering UsernameRevs list");
        return usernameRevService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportUsernameRevs(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return usernameRevService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of UsernameRev instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countUsernameRevs( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting UsernameRevs");
		return usernameRevService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getUsernameRevAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return usernameRevService.getAggregatedValues(aggregationInfo, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeclasspracticegroupAuds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeclasspracticegroupAuds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeclasspracticegroupAud> findAssociatedLicenseeclasspracticegroupAuds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeclasspracticegroupAuds");
        return usernameRevService.findAssociatedLicenseeclasspracticegroupAuds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/personAuds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personAuds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonAud> findAssociatedPersonAuds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personAuds");
        return usernameRevService.findAssociatedPersonAuds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/personaddressAuds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the personaddressAuds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<PersonaddressAud> findAssociatedPersonaddressAuds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated personaddressAuds");
        return usernameRevService.findAssociatedPersonaddressAuds(id, pageable);
    }

    @RequestMapping(value="/{id:.+}/licenseeAuds", method=RequestMethod.GET)
    @ApiOperation(value = "Gets the licenseeAuds instance associated with the given id.")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<LicenseeAud> findAssociatedLicenseeAuds(@PathVariable("id") Integer id, Pageable pageable) {

        LOGGER.debug("Fetching all associated licenseeAuds");
        return usernameRevService.findAssociatedLicenseeAuds(id, pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service UsernameRevService instance
	 */
	protected void setUsernameRevService(UsernameRevService service) {
		this.usernameRevService = service;
	}

}


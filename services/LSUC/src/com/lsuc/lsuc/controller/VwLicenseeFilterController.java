/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigInteger;
import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;
import com.wordnik.swagger.annotations.Api;
import com.wordnik.swagger.annotations.ApiOperation;
import com.wordnik.swagger.annotations.ApiParam;

import com.lsuc.lsuc.VwLicenseeFilter;
import com.lsuc.lsuc.service.VwLicenseeFilterService;


/**
 * Controller object for domain model class VwLicenseeFilter.
 * @see VwLicenseeFilter
 */
@RestController("LSUC.VwLicenseeFilterController")
@Api(value = "VwLicenseeFilterController", description = "Exposes APIs to work with VwLicenseeFilter resource.")
@RequestMapping("/LSUC/VwLicenseeFilter")
public class VwLicenseeFilterController {

    private static final Logger LOGGER = LoggerFactory.getLogger(VwLicenseeFilterController.class);

    @Autowired
	@Qualifier("LSUC.VwLicenseeFilterService")
	private VwLicenseeFilterService vwLicenseeFilterService;

	@ApiOperation(value = "Creates a new VwLicenseeFilter instance.")
	@RequestMapping(method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public VwLicenseeFilter createVwLicenseeFilter(@RequestBody VwLicenseeFilter vwLicenseeFilter) {
		LOGGER.debug("Create VwLicenseeFilter with information: {}" , vwLicenseeFilter);

		vwLicenseeFilter = vwLicenseeFilterService.create(vwLicenseeFilter);
		LOGGER.debug("Created VwLicenseeFilter with information: {}" , vwLicenseeFilter);

	    return vwLicenseeFilter;
	}


    @ApiOperation(value = "Returns the VwLicenseeFilter instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwLicenseeFilter getVwLicenseeFilter(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Getting VwLicenseeFilter with id: {}" , id);

        VwLicenseeFilter foundVwLicenseeFilter = vwLicenseeFilterService.getById(id);
        LOGGER.debug("VwLicenseeFilter details with id: {}" , foundVwLicenseeFilter);

        return foundVwLicenseeFilter;
    }

    @ApiOperation(value = "Updates the VwLicenseeFilter instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public VwLicenseeFilter editVwLicenseeFilter(@PathVariable("id") BigInteger id, @RequestBody VwLicenseeFilter vwLicenseeFilter) throws EntityNotFoundException {
        LOGGER.debug("Editing VwLicenseeFilter with id: {}" , vwLicenseeFilter.getRowNum());

        vwLicenseeFilter.setRowNum(id);
        vwLicenseeFilter = vwLicenseeFilterService.update(vwLicenseeFilter);
        LOGGER.debug("VwLicenseeFilter details with id: {}" , vwLicenseeFilter);

        return vwLicenseeFilter;
    }

    @ApiOperation(value = "Deletes the VwLicenseeFilter instance associated with the given id.")
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public boolean deleteVwLicenseeFilter(@PathVariable("id") BigInteger id) throws EntityNotFoundException {
        LOGGER.debug("Deleting VwLicenseeFilter with id: {}" , id);

        VwLicenseeFilter deletedVwLicenseeFilter = vwLicenseeFilterService.delete(id);

        return deletedVwLicenseeFilter != null;
    }

    /**
     * @deprecated Use {@link #findVwLicenseeFilters(String, Pageable)} instead.
     */
    @Deprecated
    @ApiOperation(value = "Returns the list of VwLicenseeFilter instances matching the search criteria.")
    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwLicenseeFilter> searchVwLicenseeFiltersByQueryFilters( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering VwLicenseeFilters list");
        return vwLicenseeFilterService.findAll(queryFilters, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwLicenseeFilter instances matching the optional query (q) request param. If there is no query provided, it returns all the instances. Pagination & Sorting parameters such as page& size, sort can be sent as request parameters. The sort value should be a comma separated list of field names & optional sort order to sort the data on. eg: field1 asc, field2 desc etc ")
    @RequestMapping(method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwLicenseeFilter> findVwLicenseeFilters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwLicenseeFilters list");
        return vwLicenseeFilterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns the paginated list of VwLicenseeFilter instances matching the optional query (q) request param. This API should be used only if the query string is too big to fit in GET request with request param. The request has to made in application/x-www-form-urlencoded format.")
    @RequestMapping(value="/filter", method = RequestMethod.POST, consumes= "application/x-www-form-urlencoded")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Page<VwLicenseeFilter> filterVwLicenseeFilters(@ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
        LOGGER.debug("Rendering VwLicenseeFilters list");
        return vwLicenseeFilterService.findAll(query, pageable);
    }

    @ApiOperation(value = "Returns downloadable file for the data matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
    @RequestMapping(value = "/export/{exportType}", method = {RequestMethod.GET,  RequestMethod.POST}, produces = "application/octet-stream")
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    public Downloadable exportVwLicenseeFilters(@PathVariable("exportType") ExportType exportType, @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query, Pageable pageable) {
         return vwLicenseeFilterService.export(exportType, query, pageable);
    }

	@ApiOperation(value = "Returns the total count of VwLicenseeFilter instances matching the optional query (q) request param. If query string is too big to fit in GET request's query param, use POST method with application/x-www-form-urlencoded format.")
	@RequestMapping(value = "/count", method = {RequestMethod.GET, RequestMethod.POST})
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Long countVwLicenseeFilters( @ApiParam("conditions to filter the results") @RequestParam(value = "q", required = false) String query) {
		LOGGER.debug("counting VwLicenseeFilters");
		return vwLicenseeFilterService.count(query);
	}

    @ApiOperation(value = "Returns aggregated result with given aggregation info")
	@RequestMapping(value = "/aggregations", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
	public Page<Map<String, Object>> getVwLicenseeFilterAggregatedValues(@RequestBody AggregationInfo aggregationInfo, Pageable pageable) {
        LOGGER.debug("Fetching aggregated results for {}", aggregationInfo);
        return vwLicenseeFilterService.getAggregatedValues(aggregationInfo, pageable);
    }


    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service VwLicenseeFilterService instance
	 */
	protected void setVwLicenseeFilterService(VwLicenseeFilterService service) {
		this.vwLicenseeFilterService = service;
	}

}


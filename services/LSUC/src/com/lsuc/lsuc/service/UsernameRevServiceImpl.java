/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.lsuc.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wavemaker.runtime.data.dao.WMGenericDao;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.model.AggregationInfo;
import com.wavemaker.runtime.file.model.Downloadable;

import com.lsuc.lsuc.LicenseeAud;
import com.lsuc.lsuc.LicenseeclasspracticegroupAud;
import com.lsuc.lsuc.PersonAud;
import com.lsuc.lsuc.PersonaddressAud;
import com.lsuc.lsuc.UsernameRev;


/**
 * ServiceImpl object for domain model class UsernameRev.
 *
 * @see UsernameRev
 */
@Service("LSUC.UsernameRevService")
public class UsernameRevServiceImpl implements UsernameRevService {

    private static final Logger LOGGER = LoggerFactory.getLogger(UsernameRevServiceImpl.class);

    @Autowired
	@Qualifier("LSUC.PersonaddressAudService")
	private PersonaddressAudService personaddressAudService;

    @Autowired
	@Qualifier("LSUC.LicenseeclasspracticegroupAudService")
	private LicenseeclasspracticegroupAudService licenseeclasspracticegroupAudService;

    @Autowired
	@Qualifier("LSUC.PersonAudService")
	private PersonAudService personAudService;

    @Autowired
	@Qualifier("LSUC.LicenseeAudService")
	private LicenseeAudService licenseeAudService;

    @Autowired
    @Qualifier("LSUC.UsernameRevDao")
    private WMGenericDao<UsernameRev, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<UsernameRev, Integer> wmGenericDao) {
        this.wmGenericDao = wmGenericDao;
    }

    @Transactional(value = "LSUCTransactionManager")
    @Override
	public UsernameRev create(UsernameRev usernameRev) {
        LOGGER.debug("Creating a new UsernameRev with information: {}", usernameRev);
        UsernameRev usernameRevCreated = this.wmGenericDao.create(usernameRev);
        if(usernameRevCreated.getLicenseeclasspracticegroupAuds() != null) {
            for(LicenseeclasspracticegroupAud licenseeclasspracticegroupAud : usernameRevCreated.getLicenseeclasspracticegroupAuds()) {
                licenseeclasspracticegroupAud.setUsernameRev(usernameRevCreated);
                LOGGER.debug("Creating a new child LicenseeclasspracticegroupAud with information: {}", licenseeclasspracticegroupAud);
                licenseeclasspracticegroupAudService.create(licenseeclasspracticegroupAud);
            }
        }

        if(usernameRevCreated.getPersonAuds() != null) {
            for(PersonAud personAud : usernameRevCreated.getPersonAuds()) {
                personAud.setUsernameRev(usernameRevCreated);
                LOGGER.debug("Creating a new child PersonAud with information: {}", personAud);
                personAudService.create(personAud);
            }
        }

        if(usernameRevCreated.getPersonaddressAuds() != null) {
            for(PersonaddressAud personaddressAud : usernameRevCreated.getPersonaddressAuds()) {
                personaddressAud.setUsernameRev(usernameRevCreated);
                LOGGER.debug("Creating a new child PersonaddressAud with information: {}", personaddressAud);
                personaddressAudService.create(personaddressAud);
            }
        }

        if(usernameRevCreated.getLicenseeAuds() != null) {
            for(LicenseeAud licenseeAud : usernameRevCreated.getLicenseeAuds()) {
                licenseeAud.setUsernameRev(usernameRevCreated);
                LOGGER.debug("Creating a new child LicenseeAud with information: {}", licenseeAud);
                licenseeAudService.create(licenseeAud);
            }
        }
        return usernameRevCreated;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public UsernameRev getById(Integer usernamerevId) throws EntityNotFoundException {
        LOGGER.debug("Finding UsernameRev by id: {}", usernamerevId);
        UsernameRev usernameRev = this.wmGenericDao.findById(usernamerevId);
        if (usernameRev == null){
            LOGGER.debug("No UsernameRev found with id: {}", usernamerevId);
            throw new EntityNotFoundException(String.valueOf(usernamerevId));
        }
        return usernameRev;
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public UsernameRev findById(Integer usernamerevId) {
        LOGGER.debug("Finding UsernameRev by id: {}", usernamerevId);
        return this.wmGenericDao.findById(usernamerevId);
    }


	@Transactional(rollbackFor = EntityNotFoundException.class, value = "LSUCTransactionManager")
	@Override
	public UsernameRev update(UsernameRev usernameRev) throws EntityNotFoundException {
        LOGGER.debug("Updating UsernameRev with information: {}", usernameRev);
        this.wmGenericDao.update(usernameRev);

        Integer usernamerevId = usernameRev.getId();

        return this.wmGenericDao.findById(usernamerevId);
    }

    @Transactional(value = "LSUCTransactionManager")
	@Override
	public UsernameRev delete(Integer usernamerevId) throws EntityNotFoundException {
        LOGGER.debug("Deleting UsernameRev with id: {}", usernamerevId);
        UsernameRev deleted = this.wmGenericDao.findById(usernamerevId);
        if (deleted == null) {
            LOGGER.debug("No UsernameRev found with id: {}", usernamerevId);
            throw new EntityNotFoundException(String.valueOf(usernamerevId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public Page<UsernameRev> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all UsernameRevs");
        return this.wmGenericDao.search(queryFilters, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<UsernameRev> findAll(String query, Pageable pageable) {
        LOGGER.debug("Finding all UsernameRevs");
        return this.wmGenericDao.searchByQuery(query, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Downloadable export(ExportType exportType, String query, Pageable pageable) {
        LOGGER.debug("exporting data in the service LSUC for table UsernameRev to {} format", exportType);
        return this.wmGenericDao.export(exportType, query, pageable);
    }

	@Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
	public long count(String query) {
        return this.wmGenericDao.count(query);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
	@Override
    public Page<Map<String, Object>> getAggregatedValues(AggregationInfo aggregationInfo, Pageable pageable) {
        return this.wmGenericDao.getAggregatedValues(aggregationInfo, pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeclasspracticegroupAud> findAssociatedLicenseeclasspracticegroupAuds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeclasspracticegroupAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usernameRev.id = '" + id + "'");

        return licenseeclasspracticegroupAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<PersonAud> findAssociatedPersonAuds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated personAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usernameRev.id = '" + id + "'");

        return personAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<PersonaddressAud> findAssociatedPersonaddressAuds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated personaddressAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usernameRev.id = '" + id + "'");

        return personaddressAudService.findAll(queryBuilder.toString(), pageable);
    }

    @Transactional(readOnly = true, value = "LSUCTransactionManager")
    @Override
    public Page<LicenseeAud> findAssociatedLicenseeAuds(Integer id, Pageable pageable) {
        LOGGER.debug("Fetching all associated licenseeAuds");

        StringBuilder queryBuilder = new StringBuilder();
        queryBuilder.append("usernameRev.id = '" + id + "'");

        return licenseeAudService.findAll(queryBuilder.toString(), pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonaddressAudService instance
	 */
	protected void setPersonaddressAudService(PersonaddressAudService service) {
        this.personaddressAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeclasspracticegroupAudService instance
	 */
	protected void setLicenseeclasspracticegroupAudService(LicenseeclasspracticegroupAudService service) {
        this.licenseeclasspracticegroupAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service PersonAudService instance
	 */
	protected void setPersonAudService(PersonAudService service) {
        this.personAudService = service;
    }

    /**
	 * This setter method should only be used by unit tests
	 *
	 * @param service LicenseeAudService instance
	 */
	protected void setLicenseeAudService(LicenseeAudService service) {
        this.licenseeAudService = service;
    }

}


/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.
 This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with wavemaker-com*/
package com.lsuc.emailservice;

import java.util.Properties;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.wavemaker.runtime.security.SecurityService;
import com.wavemaker.runtime.service.annotations.ExposeToClient;

//import com.lsuc.emailservice.model.*;

/**
 * This is a singleton class with all its public methods exposed as REST APIs via generated controller class.
 * To avoid exposing an API for a particular public method, annotate it with @HideFromClient.
 *
 * Method names will play a major role in defining the Http Method for the generated APIs. For example, a method name
 * that starts with delete/remove, will make the API exposed as Http Method "DELETE".
 *
 * Method Parameters of type primitives (including java.lang.String) will be exposed as Query Parameters &
 * Complex Types/Objects will become part of the Request body in the generated API.
 */
@ExposeToClient
public class EmailService {

    private static final Logger logger = LoggerFactory.getLogger(EmailService.class);
    private static final String NO_REPLY_MAIL_ID = "pramati.wave@gmail.com";
    private static final String NO_REPLY_MAIL_PASSWORD = "Pr@m@t!123";
    private static final String SUPERVISOR_MAIL_ID = "mary.wavemaker@gmail.com";
    //private static final String FORM_URL = "http://e12561a71473b.cloud.wavemakeronline.com/CivicXpress/#/Forms?

    @Autowired
    private SecurityService securityService;

    /**
     * This is sample java operation that accepts an input from the caller and responds with "Hello".
     *
     * SecurityService that is Autowired will provide access to the security context of the caller. It has methods like
     * isAuthenticated(),
     * getUserName() and getUserId() etc which returns the information based on the caller context.
     *
     * Methods in this class can declare HttpServletRequest, HttpServletResponse as input parameters to access the
     * caller's request/response objects respectively. These parameters will be injected when request is made (during
     * API invocation).
     */
    
    public String sendEmail(String licenseeNumber, String licenseeName, String personPk) {
        try {
            // Use javamail api, set parameters from registration.properties file
            // set the session properties
            Properties props = System.getProperties();
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.port", "587");
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.required", "true");
            Session session = Session.getDefaultInstance(props, null);

            String emailSubject = "Status Change for Licensee: " + licenseeNumber;
            String emailMessage = "<div style='background-color: #eee;padding: 1em;'><table width='100%' style='border: none;'><tr><td><img height='50' src='http://www.lsuc.on.ca/images/imgLSUCLogo.png' alt='The Law Society of Upper Canada'></td><td ><h2 style='border-bottom:1px solid #eee;margin-top:0px;margin-bottom: 5px;position: relative;text-align:right;'>The Law Society of Upper Canada </h2></td></tr></table></div><br/> <p>Hi, </p><br/>";
             String approveUrl = "https://www.wavemakeronline.com/run-53t562sphl/LSUC/#/Approvals?id=" + personPk;
            logger.info("*********************Approve URL****************" + approveUrl);

            emailMessage = emailMessage + "<p>The Licensee Status for <b>" + licenseeName + "</b>";
            emailMessage = emailMessage + " with Licensee Number: <b>" + licenseeNumber + "</b> has been changed. </p><p>Please review and provide your approval.</p><br/>";
            emailMessage = emailMessage + "<p><a style='background-color:#0c62d1;color: #fff;padding:.8em 1.2em;text-decoration: none;font-weight: bold;' href = '" + approveUrl + "'>Click to review changes</a></p><br/><br/>";
            emailMessage = emailMessage + "<p>Regards " + securityService.getLoggedInUser().getUserName() + "</p><hr/>";
            emailMessage = emailMessage + "<p>Note: This is a system generated email. Kindly do not reply.</p>";

            // Create email message
            MimeMessage message = new MimeMessage(session);
            message.setFrom(new InternetAddress(NO_REPLY_MAIL_ID));
            String[] recipientList = SUPERVISOR_MAIL_ID.split(",");
            InternetAddress[] recipientAddress = new InternetAddress[recipientList.length];
            int counter = 0;
            for (String recipient : recipientList) {
                recipientAddress[counter] = new InternetAddress(recipient.trim());
                counter++;
            }
            message.setRecipients(Message.RecipientType.TO, recipientAddress);
            message.setSubject(emailSubject);
            message.setContent(emailMessage, "text/html");
            
            // Send smtp message
            Transport tr = session.getTransport("smtp");
            tr.connect("smtp.gmail.com", 587, NO_REPLY_MAIL_ID, NO_REPLY_MAIL_PASSWORD);
            message.saveChanges();
            tr.sendMessage(message, message.getAllRecipients());
            tr.close();
            return "Mail sent successfully.";

        } catch (MessagingException e) {
            return "Error in method sendEmailNotification: " + e;
        }
    }

    public String helloWorld(String user) {
        return "Hello " + user;
    }
}
